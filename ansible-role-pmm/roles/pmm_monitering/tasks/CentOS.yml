---
  - name: update_apt 
    shell: yum update -y
    become: yes

  - name: install_package
    yum: 
        name: "{{Packages}}"
        state: present
    become: yes
    register: packages

  - name: systemctl start
    service:
          name: docker
          state: started 
    become: yes
    when: packages.changed    
  

  - name: check Python3
    command: which python3 
    register: python3_status
    ignore_errors: yes    
    

  - name: install python
    yum:
            name: "{{python_package}}"
            state: present
    become: yes
    when: python3_status.stdout == ""
    register: python 

  - name: 
    shell: echo $(uname -m)
    register: lsb_release
     
#  - name: install pmm-agent 
#    get_url: 
#          url: https://repo.percona.com/yum/release/7/RPMS/x86_64/pmm2-client-2.0.0-4.rc1.el7.{{lsb_release.stdout}}.rpm 
#          dest: /home/centos/pmm2-client-2.

  - name: Install my_package
    yum: 
        name: '{{item}}'
        state: present
    become: yes
    register: status
    loop:
           -  'https://repo.percona.com/yum/percona-release-latest.noarch.rpm'
           -  'pmm2-client'
           -  'Percona-Server-shared-compat-57'

  - name: update_apt
    shell: dnf update -y
    become: yes
    when: status.changed 

  - name: install python module 
    command: pip3 install "{{python_module}}"
    become: yes
        
  - name: Docker module install
    pip: 
      name: "{{python_module}}"
    become: yes
    register: module

  - name: Get infos on container
    vars:
        ansible_python_interpreter: /usr/bin/python3     
    docker_container_info:
      name: "{{volume_name}}"
    register: result
    become: yes

  - name: Create a volume
    shell: "docker create --volume /srv --name {{volume_name}} {{images}} /bin/true "
    become: yes
    when: result.exists == False

  - name: Get infos on container
    vars:
        ansible_python_interpreter: /usr/bin/python3
    docker_container_info:
       name: "{{container_name}}"
    register: container
    become: yes

  - debug:
          var: container

  - name: Create default containers
    vars:
        ansible_python_interpreter: /usr/bin/python3    
    docker_container:
        name: "{{container_name}}"
        image: "{{images}}"
        volumes_from:
                - "{{volume_name}}"
        ports:
           - "443:443"
        state: started
    become: yes
    when: container.exists == false or container.container.State.Status != "running"
    register: status

  - name: Run a simple command (command)
    command: docker exec "{{container_name}}"  bash -c  "ln -s /srv/grafana /usr/share/grafana/data; grafana-cli --homepath /usr/share/grafana admin reset-admin-password  {{Password}}"
    become: yes
    register: container_status
    when: status.changed
       
  - debug:
      var: container_status  
    
  - name: Connecting pmm agent 
    command: pmm-admin config  --server-insecure-tls --server-url=https://admin:{{Password}}@localhost:443
    become: yes
    when: container_status.changed

  - name: checking service name 
    shell: "pmm-admin list  | awk -v service={{service_name}} '{if($2 == service)print$2}'" 
    register: service_status

  - name: Connecting database
    shell: "pmm-admin add mysql --host {{DB_endpoint}} --password {{DB_password}} --username {{DB_username}} {{service_name}}"
    become: yes
    when: service_status.stdout == ""

    
